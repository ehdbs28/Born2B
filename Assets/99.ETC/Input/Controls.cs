//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/99.ETC/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""a6d2e1ce-5fd9-4778-8a40-0223183ccc76"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e6c5e02c-cc21-4d42-9399-522f7ca18806"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GridStart"",
                    ""type"": ""Button"",
                    ""id"": ""337884c6-65d0-48b7-ad6d-fa4f1b71948c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GridEnd"",
                    ""type"": ""Button"",
                    ""id"": ""da5f23b0-8396-4f1f-b0b8-1b0c26b3cf06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad1075b9-9a87-459e-a401-6bbbe73080f6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1abebf00-0319-4f8f-bbd1-69bc1cb9dcde"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""GridStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a8d5b24-e48e-46f4-b46e-31debfe27db2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""GridEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""7a9f5211-f75e-4fad-9057-b30398897dd8"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""6b819baf-eaca-46cb-83ac-cc7726d74ea8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d22df9cc-2b55-4887-80e4-85added79927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12113edd-3fc0-438d-a008-5f117d171a3d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bdbfdc8-a89b-4728-bd1e-f20299227025"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""75b9b581-9b32-4bbe-bd4f-094a5dc3684c"",
            ""actions"": [
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8bf4a65d-7881-4823-b805-313d3e10e38a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19495595-da65-4256-9ac5-3b1efae3de52"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_ScreenPosition = m_Grid.FindAction("ScreenPosition", throwIfNotFound: true);
        m_Grid_GridStart = m_Grid.FindAction("GridStart", throwIfNotFound: true);
        m_Grid_GridEnd = m_Grid.FindAction("GridEnd", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_ScreenPosition = m_Attack.FindAction("ScreenPosition", throwIfNotFound: true);
        m_Attack_Attack = m_Attack.FindAction("Attack", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ScreenPosition = m_UI.FindAction("ScreenPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private List<IGridActions> m_GridActionsCallbackInterfaces = new List<IGridActions>();
    private readonly InputAction m_Grid_ScreenPosition;
    private readonly InputAction m_Grid_GridStart;
    private readonly InputAction m_Grid_GridEnd;
    public struct GridActions
    {
        private @Controls m_Wrapper;
        public GridActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_Grid_ScreenPosition;
        public InputAction @GridStart => m_Wrapper.m_Grid_GridStart;
        public InputAction @GridEnd => m_Wrapper.m_Grid_GridEnd;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void AddCallbacks(IGridActions instance)
        {
            if (instance == null || m_Wrapper.m_GridActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GridActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
            @GridStart.started += instance.OnGridStart;
            @GridStart.performed += instance.OnGridStart;
            @GridStart.canceled += instance.OnGridStart;
            @GridEnd.started += instance.OnGridEnd;
            @GridEnd.performed += instance.OnGridEnd;
            @GridEnd.canceled += instance.OnGridEnd;
        }

        private void UnregisterCallbacks(IGridActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
            @GridStart.started -= instance.OnGridStart;
            @GridStart.performed -= instance.OnGridStart;
            @GridStart.canceled -= instance.OnGridStart;
            @GridEnd.started -= instance.OnGridEnd;
            @GridEnd.performed -= instance.OnGridEnd;
            @GridEnd.canceled -= instance.OnGridEnd;
        }

        public void RemoveCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGridActions instance)
        {
            foreach (var item in m_Wrapper.m_GridActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GridActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GridActions @Grid => new GridActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
    private readonly InputAction m_Attack_ScreenPosition;
    private readonly InputAction m_Attack_Attack;
    public struct AttackActions
    {
        private @Controls m_Wrapper;
        public AttackActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_Attack_ScreenPosition;
        public InputAction @Attack => m_Wrapper.m_Attack_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void AddCallbacks(IAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IAttackActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ScreenPosition;
    public struct UIActions
    {
        private @Controls m_Wrapper;
        public UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPosition => m_Wrapper.m_UI_ScreenPosition;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IGridActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnGridStart(InputAction.CallbackContext context);
        void OnGridEnd(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnScreenPosition(InputAction.CallbackContext context);
    }
}
